# main.tf  file for full cicd

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~>3.0"
    }
  }
}

# Add data source
data "aws_availability_zones" "available" {}

# Random ID
resource "random_id" "random" {
  byte_length = 2

}

# Define VPC
resource "aws_vpc" "dev_vpc" {
  cidr_block = var.vpc_cidr

  tags = {
    # Name = "dev_vpc"
    Name = "dev_vpc-${random_id.random.dec}"
  }
  # Lifecycle allows New vpc to connect to IGW before deleting old vpc to avoid conflicts. Help in the Future
  lifecycle {
    create_before_destroy = true

  }
}

# Define public subnet
resource "aws_subnet" "public_subnet" {
  count                   = 2
  vpc_id                  = aws_vpc.dev_vpc.id
  cidr_block              = var.public_subnet_cidr[count.index]
  map_public_ip_on_launch = true
  #availability_zone       = var.availability_zone
  availability_zone = data.aws_availability_zones.available.names[count.index]
  tags = {
    Name = "dev-public-subnet-${count.index + 1}"
  }
}

# Define private subnet
resource "aws_subnet" "private_subnet" {
  vpc_id            = aws_vpc.dev_vpc.id
  cidr_block        = var.private_subnet_cidr
  availability_zone = var.availability_zone
  tags = {
    Name = "dev-private-subnet"
  }
}

# Define internet gateway for public access
resource "aws_internet_gateway" "dev_igw" {
  vpc_id = aws_vpc.dev_vpc.id

  tags = {
    # Name = "dev_igw"
    Name = "dev_igw-${random_id.random.dec}"
  }
}

# Define route table for public subnet
resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.dev_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.dev_igw.id
  }

  tags = {
    Name = "dev-public-route-table"
  }
}

# Default Route Table. Must be explicitly Called
resource "aws_route_table" "default_route_table" {
  vpc_id = aws_vpc.dev_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.dev_igw.id
  }

  tags = {
    Name = "default-public-route-table"
  }
}
# Create route table newly added
resource "aws_default_route_table" "dev_private_rt" {
  default_route_table_id = aws_vpc.dev_vpc.default_route_table_id
  tags = {
    Name = "dev_private"
  }
}


# Associate route table with public subnet
resource "aws_route_table_association" "public_subnet_assoc" {
 # subnet_id      = aws_subnet.public_subnet.id
  subnet_id      = var.public_subnet_cidr[count.index]
  route_table_id = aws_route_table.public_route_table.id
}


# Define security group for jump box
# resource "aws_security_group" "jump_box_sg" {
#   name        = "jump_box_sg Security Group"
#   description = "To Allow Port"
#   vpc_id      = aws_vpc.dev_vpc.id

#   dynamic "ingress" {
#     iterator = port
#     for_each = var.ports
#     content {
#       from_port = port.value
#       to_port   = port.value
#       protocol  = "tcp"
#       #cidr_blocks = ["44.214.100.9/32"]
#       cidr_blocks = [var.admin_ip]
#     }

#   }


#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"]
#   }

#   tags = {
#     Name = "dev-jump-box-sg"
#   }
# }

#### Newly added
# Define Security Group for Internal SSH Communication
resource "aws_security_group" "internal_ssh_sg" {
  vpc_id = aws_vpc.dev_vpc.id

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "dev-internal-ssh-sg"
  }
}

# Define Security Group for Jump Box
resource "aws_security_group" "jump_box_sg" {
  vpc_id = aws_vpc.dev_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.admin_ip] # Restrict SSH to your IP
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "dev-jump-box-sg"
  }
}

# Define Security Group for CI/CD Server
resource "aws_security_group" "cicd_server_sg" {
  vpc_id = aws_vpc.dev_vpc.id

  ingress {
    from_port   = 8080
    to_port     = 8081
    protocol    = "tcp"
    cidr_blocks = [var.admin_ip] # Restrict Jenkins/SonarQube access to your IP
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "dev-cicd-server-sg"
  }
}

# Define Security Group for Web Server
resource "aws_security_group" "web_server_sg" {
  vpc_id = aws_vpc.dev_vpc.id

  ingress {
    from_port   = 8080
    to_port     = 8081
    protocol    = "tcp"
    cidr_blocks = [var.admin_ip] # Restrict Jenkins/SonarQube access to your IP
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "dev-web-server-sg"
  }
}

# Allow SSH between instances for the CI/CD Server
resource "aws_security_group_rule" "allow_ssh_internal_cicd" {
  type                     = "ingress"
  from_port                = 22
  to_port                  = 22
  protocol                 = "tcp"
  security_group_id        = aws_security_group.cicd_server_sg.id
  source_security_group_id = aws_security_group.internal_ssh_sg.id
}

# Allow SSH between instances for the Web Server
resource "aws_security_group_rule" "allow_ssh_internal_web" {
  type                     = "ingress"
  from_port                = 22
  to_port                  = 22
  protocol                 = "tcp"
  security_group_id        = aws_security_group.web_server_sg.id
  source_security_group_id = aws_security_group.internal_ssh_sg.id
}

# EC2 Instances Configuration
resource "aws_instance" "jump_box" {
  ami                    = var.jump_box_ami
  instance_type          = var.instance_type_jump_box
  subnet_id              = aws_subnet.public_subnet.id
  vpc_security_group_ids = [aws_security_group.jump_box_sg.id]
  key_name               = var.key_name

  tags = {
    Name = "dev-jump-box"
  }
}

resource "aws_instance" "cicd_server" {
  ami                    = var.cicd_ami
  instance_type          = var.instance_type_cicd
  subnet_id              = aws_subnet.public_subnet.id
  vpc_security_group_ids = [aws_security_group.cicd_server_sg.id, aws_security_group.internal_ssh_sg.id]
  key_name               = var.key_name

  tags = {
    Name = "dev-cicd-server"
  }
}

resource "aws_instance" "web_server" {
  ami                    = var.web_server_ami
  instance_type          = var.instance_type_web_server
  subnet_id              = aws_subnet.private_subnet.id
  vpc_security_group_ids = [aws_security_group.web_server_sg.id, aws_security_group.internal_ssh_sg.id]
  key_name               = var.key_name

  tags = {
    Name = "dev-web-server"
  }
}



###### Newly added ends here ####
# resource "aws_security_group" "web_server_sg" {
#   vpc_id = aws_vpc.dev_vpc.id

#   dynamic "ingress" {
#     iterator = port
#     for_each = var.ports
#     content {
#       from_port   = port.value
#       to_port     = port.value
#       protocol    = "tcp"
#       cidr_blocks = [var.admin_ip] # Allow only your IP
#     }
#   }

#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"]
#   }

#   tags = {
#     Name = "web-server-sg"
#   }
# }

# resource "aws_security_group" "cicd_server_sg" {
#   vpc_id = aws_vpc.dev_vpc.id

#   dynamic "ingress" {
#     iterator = port
#     for_each = var.ports
#     content {
#       from_port   = port.value
#       to_port     = port.value
#       protocol    = "tcp"
#       cidr_blocks = [var.admin_ip] # Allow only your IP
#     }
#   }

#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"]
#   }

#   tags = {
#     Name = "cicd-server-sg"
#   }
# }





# resource "aws_security_group_rule" "private_server_ingress" {
#   for_each                 = toset([for port in var.ports : tostring(port)]) # This will iterate over each port in the list
#   type                     = "ingress"
#   from_port                = tonumber(each.value)
#   to_port                  = tonumber(each.value)
#   protocol                 = "tcp"
#   security_group_id        = aws_security_group.private_server_sg.id
#   source_security_group_id = aws_security_group.jump_box_sg.id # Allow only from jump box SG
# }


# resource "aws_security_group" "private_server_sg" {
#   vpc_id = aws_vpc.dev_vpc.id

#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"]
#   }

#   tags = {
#     Name = "private-server-sg"
#   }
# }

# # Define EC2 jump box instance
# resource "aws_instance" "jump_box" {
#   ami                    = var.jump_box_ami
#   instance_type          = var.instance_type_jump_box
#   subnet_id              = aws_subnet.public_subnet.id
#   vpc_security_group_ids = [aws_security_group.jump_box_sg.id]
#   key_name               = var.key_name

#   tags = {
#     Name = "dev-jump-box"
#   }
# }

# # Define CI/CD instance
# resource "aws_instance" "cicd_server" {
#   ami                    = var.cicd_ami
#   instance_type          = var.instance_type_cicd
#   subnet_id              = aws_subnet.public_subnet.id
#   vpc_security_group_ids = [aws_security_group.jump_box_sg.id]

#   tags = {
#     Name = "dev-cicd-server"
#   }
# }

# Define private EC2 instance (Web Server)
# resource "aws_instance" "web_server" {
#   ami                    = var.web_server_ami
#   instance_type          = var.instance_type_web_server
#   subnet_id              = aws_subnet.private_subnet.id
#   vpc_security_group_ids = [aws_security_group.jump_box_sg.id]
#   key_name               = var.key_name
#   #user_data = file("${path.module}/InstallDocker.sh")

#   tags = {
#     Name = "dev-web-server"
#   }
# }
# *************************   Set Up a NAT Gateway in the Public Subnet  *****************************
# Define a NAT Gateway in the public subnet:
resource "aws_nat_gateway" "dev_nat" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_subnet.id
  tags = {
    Name = "dev-nat-gateway"
  }
}

resource "aws_eip" "nat_eip" {
  vpc = true
  tags = {
    Name = "nat-eip"
  }
}

# Add a Route Table for the Private Subnet and associate it with the NAT Gateway to enable outbound internet access:
resource "aws_route_table" "private_route_table" {
  vpc_id = aws_vpc.dev_vpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.dev_nat.id
  }

  tags = {
    Name = "private-route-table"
  }
}

resource "aws_route_table_association" "private_subnet_assoc" {
  subnet_id      = aws_subnet.private_subnet.id
  route_table_id = aws_route_table.private_route_table.id
}
